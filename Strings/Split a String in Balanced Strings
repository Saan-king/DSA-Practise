Balanced strings are those that have an equal quantity of 'L' and 'R' characters.
Given a balanced string s, split it into some number of substrings such that:

Each substring is balanced.
Return the maximum number of balanced strings you can obtain.

Example 1:

Input: s = "RLRRLLRLRL"
Output: 4
Explanation: s can be split into "RL", "RRLL", "RL", "RL", each substring contains same number of 'L' and 'R'.

Example 2:
Input: s = "RLRRRLLRLL"
Output: 2
Explanation: s can be split into "RL", "RRRLLRLL", each substring contains same number of 'L' and 'R'.
Note that s cannot be split into "RL", "RR", "RL", "LR", "LL", because the 2nd and 5th substrings are not balanced.

--------------------------
Java Solution:

class Solution {
    public int balancedStringSplit(String s) {
        if (s == null || s.length() == 0)
            return 0;
        int left = 0, right = 0, score = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == 'L')
                left++;
            else
                right++;
            if (left == right) 
                score++;
        }
        return score;
    }
}

Another solution:

class Solution {
    public int balancedStringSplit(String s) {
        int c=0,res=0;
        for(int i=0;i<s.length();i++)
        {
            c+=s.charAt(i)=='L'?1:-1;
            if(c==0) res+=1;
        }
        return res;
    }
}
