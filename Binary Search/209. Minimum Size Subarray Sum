Given an array of positive integers nums and a positive integer target, return the minimal length of a 
subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.

Input: target = 4, nums = [1,4,4]
Output: 1

class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int left=0,result=Integer.MAX_VALUE;
        int val_sum=0;

        for(int i=0;i<nums.length;i++)
        {
            val_sum+=nums[i];

            while(val_sum>=target)
            {
                result=Math.min(result,i+1-left);
                val_sum-=nums[left];
                left++;
            }
        }
        return (result!=Integer.MAX_VALUE)?result:0;
    }
}
Better Understanding
class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int val_sum = 0; 
        int left = 0; 
        int result = Integer.MAX_VALUE;
        int x = Integer.MAX_VALUE; 
        for (int i = 0; i<nums.length; i++){
            val_sum += nums[i]; 

            while(val_sum>=target){
                result = Math.min(result,i+1 - left); 
                val_sum = val_sum - nums[left]; 
                left++; 
            }
        }
        if (result == x){
            return 0; 
        }
        else 
            return result; 
    }
}
