There is an integer array nums sorted in ascending order (with distinct values).
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

class Solution {
    public int search(int[] nums, int target) {
       int low=0,high=nums.length-1;
       while(low<=high)
       {
           int mid=low+(high-low)/2;

           if(nums[mid]==target) return mid;
            //if left part is sorted
           if(nums[low]<=nums[mid])
           { //either it lies on the left part or not
               if(target>=nums[low] && target<=nums[mid])
                    high=mid-1;            //since it present on the left part eliminate the right half
               else
                    low=mid+1;
           }
           //or the right part is sorted
           else{ //if it is present in the right part or not
               if(target>=nums[mid] && target<=nums[high])
                       low=mid+1; //since it present on the right part eliminate the left half
               else
                       high=mid-1;
           }
       }
       return -1;
    }
}

//T.C:O(nlogn)
