Example 1:
Input: root = [1,null,2,3]
Output: [3,2,1]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

-----------------------------------
Java Solution


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res=new ArrayList<Integer>();
        postorder(root,res);
        return res;
    }
    public void postorder(TreeNode root,List<Integer> res){
        if(root!=null){
            postorder(root.left,res);
            postorder(root.right,res);
            res.add(root.val);
        }
    }
}

Time Complexity: O(N)
Space Complexity: O(N)

2) Postorder Traversal using two stacks
 // POST ORDER : LEFT , RIGHT , ROOT ...STACK - LIFO
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res=new ArrayList<Integer>();
        if(root==null)return res;
        Stack<TreeNode> st1=new Stack<TreeNode>();
        Stack<TreeNode> st2=new Stack<TreeNode>();

        st1.push(root);

        while(!st1.isEmpty()){
            root=st1.pop();
            st2.push(root);
             if(root.left!=null) st1.push(root.left);
            if(root.right!=null) st1.push(root.right);          
        }
        while(!st2.isEmpty()){
            res.add(st2.pop().val);
        }
        return res;
    }
}
