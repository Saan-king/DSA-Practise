//{ Driver Code Starts
import java.util.*;
class Sorting
{
	static void printArray(int arr[])
    {
        int n = arr.length;
        for (int i=0; i<n; ++i)
            System.out.print(arr[i]+" ");
        System.out.println();
    }
    
    // Driver program
    public static void main(String args[])
    {
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		while(T>0)
		{
			int n = sc.nextInt();
			int arr[] = new int[n];
			for(int i=0;i<n;i++)
				arr[i] = sc.nextInt();

			
			new Solution().quickSort(arr,0,n-1);
			printArray(arr);
		    T--;
		}
} }
// } Driver Code Ends


class Solution
{
    //Function to sort an array using quick sort algorithm.
    static void quickSort(int arr[], int low, int high)
    {
        // code here
        if(low<high){
        int pivotpos=partition(arr,low,high);
        quickSort(arr,low,pivotpos);
        quickSort(arr,pivotpos+1,high);
    }}
    static int partition(int arr[], int low, int high)
    {
        // your code here
        int pivot=arr[low];
        int i=low-1,j=high+1;
        //Stop when i crosses j
       while(true){ 
       
         //increment i , till it find greater element than pivot
           do{      
            i++;
        }while(arr[i]<pivot);
        
          //decrement j , till it find smaller element than pivot
         do{
            j--;
        }while(arr[j]>pivot);
        
        if(i>=j)
            {
                 return j;    
            }
              //swap i and j 
                int temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
         
       }     
    } 
}

//Time Complexity: O(nlogn) , Worst Case: O(n^2)
//Spc\ace complexity: O(n);
