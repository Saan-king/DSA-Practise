Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.
You must decrease the overall operation steps as much as possible.

Example:
Input: nums = [2,2,2,0,1]
Output: 0

Similar to the Find Minimum in Rotated Sorted Array question but nums contains duplicates

class Solution {
    public int findMin(int[] nums) {
        int low=0,high=nums.length-1;

        while(low<high)
        {
            int mid=low+(high-low)/2;
            if(nums[mid]>nums[high])
                low=mid+1;
            else if(nums[mid]<nums[high])
               high=mid;  //high=mid because we dont know whether lower element present bfor mid;
            else    
                high--;  //only step(high-- because we use high for mid comparisons,can also use low) added for find minimum in rotated sorted array
      //high -- because if both mid and high are same, we are sure that high will not be ans,must be inbetween mid and high
      }
        return nums[high];
    }
}

//Worst caseL O(N) -->when array is  arr[1,1,1,1,1,1]
//Avg case ->(O(nlogn))
