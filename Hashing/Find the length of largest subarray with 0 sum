Given an array arr[] of length N, find the length of the longest sub-array with a sum equal to 0.

Examples:

Input: arr[] = {15, -2, 2, -8, 1, 7, 10, 23}
Output: 5
Explanation: The longest sub-array with elements summing up-to 0 is {-2, 2, -8, 1, 7}

Input: arr[] = {1, 2, 3}
Output: 0
Explanation: There is no subarray with 0 sum

----------------------------------------

Java:

Naive Approach( sometimes TLE)

class GfG
{
    int maxLen(int arr[], int n)
    {
        // Your code here
        int maxL=0;
        for(int i=0;i<n;i++)
        {
            int currSum=0;
            for(int j=i;j<n;j++)
            {
                currSum+=arr[j];
            
            if(currSum==0)
                maxL=Math.max(maxL,j-i+1);
            }
        }
        return maxL;
    }
}

Using Hashing

class GfG
{
    int maxLen(int arr[], int n)
    {
        // Your code here
        HashMap<Integer,Integer> h=new HashMap<Integer,Integer>();
        int sum=0,max=0;
        for(int i=0;i<n;i++)
        {
            sum+=arr[i];
            if(sum==0)
                max=i+1;
            if(h.containsKey(sum)){
                int k=i-h.get(sum);
                max=Math.max(max,k);
            }
            else
                h.put(sum,i);
        }
        return max;
    }
}

//T.C: O(N)
//S.C: O(N)
