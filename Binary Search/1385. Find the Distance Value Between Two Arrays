Given two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays.

The distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.

Example 1:

Input: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2
Output: 2
Explanation: 
For arr1[0]=4 we have: 
|4-10|=6 > d=2 
|4-9|=5 > d=2 
|4-1|=3 > d=2 
|4-8|=4 > d=2 
For arr1[1]=5 we have: 
|5-10|=5 > d=2 
|5-9|=4 > d=2 
|5-1|=4 > d=2 
|5-8|=3 > d=2
For arr1[2]=8 we have:
|8-10|=2 <= d=2
### |8-9|=1 <= d=2
|8-1|=7 > d=2
### |8-8|=0 <= d=2

------------

Java:

//Brute Force
class Solution {
    public int findTheDistanceValue(int[] arr1, int[] arr2, int d) {

        int distance=0;
        for(int i=0;i<arr1.length;i++)
        {
            int count=0;
            for(int j=0;j<arr2.length;j++)
            {
                if(Math.abs(arr1[i]-arr2[j])>d) ++count;
            }
            if(count==arr2.length) distance++;
        }
    return distance;
    }
}

Solution 2:

class Solution {
    public int findTheDistanceValue(int[] arr1, int[] arr2, int d) {

        Arrays.sort(arr2);
        int distance =0;
        for(int num:arr1)
        {
            if(closestDistance(arr2,num-d,num+d))
                distance++;
        }

        return distance;
    }
        private boolean closestDistance(int[] arr2,int from,int to)
        {
            int start=0;
            int end=arr2.length-1;

            while(start<=end)
            {
                int mid=start+(end-start)/2;
                if(arr2[mid]>=from && arr2[mid]<=to)
                    return false;
                else if(arr2[mid]<from)
                    start=mid+1;
                else
                    end=mid-1;
            }
    return true;
    }
}
