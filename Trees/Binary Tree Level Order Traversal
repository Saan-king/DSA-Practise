Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

Example:1
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

Example 2:
Input: root = [1]
Output: [[1]]
 
 ----------------------
 Java Solution:
 
 BFS:
 
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> q=new LinkedList<TreeNode>();
        List<List<Integer>> res=new LinkedList<List<Integer>>();

        if(root==null) return res;
        q.offer(root);
        while(!q.isEmpty()){
            int level=q.size();
            List<Integer> sub=new LinkedList<Integer>();
            for(int i=0;i<level;i++)
                {
                    if(q.peek().left!=null) q.offer(q.peek().left);
                    if(q.peek().right!=null) q.offer(q.peek().right);
                    sub.add(q.poll().val);
                }
                res.add(sub);
        }
    return res;
    }
}

DFS:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        
        List<List<Integer>> res=new LinkedList<List<Integer>>();
        solve(res,root,0);
        return res; 
    }

    public void solve(List<List<Integer>> ans,TreeNode cur,int level){
        if(cur==null) return;

        if(ans.size()==level)
            ans.add(new ArrayList<Integer>());
        
        ans.get(level).add(cur.val);
        solve(ans,cur.left,level+1);
        solve(ans,cur.right,level+1);
    }

}


Time complexity: 2^n
Space complexity: n
