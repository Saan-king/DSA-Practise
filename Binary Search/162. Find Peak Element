A peak element is an element that is strictly greater than its neighbors.
You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.

class Solution {
    public int findPeakElement(int[] nums) {
       int low=0,high=nums.length-1;
       while(low<high)
       {
            int mid=(low+high)/2;
            if(nums[mid]>nums[mid+1]) //if mid element is greater than mid+1, we are sure that peak element is present in the left half
                high=mid; //high=mid bcoz the mid element can also be peak or the left half
            else
                low=mid+1;
       }
       return high;
    }
}

//T.C:O(nlogn)
