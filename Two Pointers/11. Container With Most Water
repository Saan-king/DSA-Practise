
You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

------------------------------------------------------------

Java:

class Solution {
    public int maxArea(int[] height) {
        int left=0,right=height.length-1;
        int sum=0;
        while(left<right){
            int width=right-left;  //to find area we need width, to find width we are subtracting right-left
            int h=Math.min(height[left],height[right]);
            int area=width*h;
            sum=Math.max(area,sum);

            if(height[left]<height[right]) left++;
            else if(height[left]>height[right]) right--;
            else {
            left++;right--;
            }
        }
        return sum;
    }
}
